#!/usr/bin/env python
#! -*- coding: utf-8 -*-

import argparse
import os
from os import path
import re
import shlex
import subprocess

class FileInfo:
    def __init__(self, name):
        self.name = name
        self.patch = ''
        self.content = None

def do_cmd(cmd):
    args = shlex.split(cmd)
    p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return p.stdout.read()

def get_args():
    args_parser = argparse.ArgumentParser(
            description = 'Find the last dependent commit of a patch generated by two specified commits.')

    args_parser.add_argument(
            'start_point',
            metavar = 'START_POINT',
            nargs = '?',
            default = 'HEAD',
            help = 'The beginning of the patch.')

    args_parser.add_argument(
            'end_point',
            metavar = 'END_POINT',
            nargs = '?',
            help = 'The end of the patch.')

    args_parser.add_argument(
            '-a', '--all',
            action='store_true',
            help = 'The end of the patch.')

    args = args_parser.parse_args()
    return args

def chcwd_to_git_root():
    if not path.exists('.git'):
        os.chdir(path.dirname(os.getcwd()))
        chcwd_to_git_root()

def get_patch(args):
    cmd = ''
    if args.end_point is None:
        cmd = 'git diff {0}'.format(args.start_point)
    else:
        cmd = 'git diff {0} {1}'.format(args.start_point, args.end_point)
    return do_cmd(cmd)

def split_patch(patch):
    sep = 'diff --git a/'
    patches = patch.split(sep)
    patches.pop(0)

    file_names = []
    for patch in patches:
        (file_name, sep, do_no_care) = patch.partition(' b/')
        file_names.append(file_name)
    return (patches, file_names)

def read_line_by_line(f):
    if not path.exists(f):
        return None
    else:
        with open(f, 'rb') as _f:
            return _f.read().splitlines()

def get_related_files(patch):
    (patches, file_names) = split_patch(patch)

    files = []
    for i in range(len(file_names)):
        file_info = FileInfo(file_names[i])
        file_info.patch = patches[i]
        file_info.content = read_line_by_line(file_info.name)
        files.append(file_info)
    return files

def get_last_commit(args, **kwargs):
    cmd = ''
    commit = ''

    for key in kwargs:
        if key is 'f':
            if not args.end_point:
                cmd = 'git log -1 --pretty=%H -- {0}'.format(kwargs[key])
            else:
                cmd = 'git log -1 --pretty=%H {0}^ -- {1}'.format(args.end_point, kwargs[key])
            commit = do_cmd(cmd).splitlines()[0]
            break

    return commit

def _get_related_commits(args, fi):
    raw_patch_lines = fi.patch.splitlines()

    bufs = []
    for p in raw_patch_lines:
        if re.match('^@@\ -.+\+.*\ @@.*', p):
            bufs.append(p)

    related_lines = []
    for l in bufs:
        l = re.sub('^@@\ -', '', l)
        l = re.sub('\ \+.*', '', l)
        related_lines.append(l)

    bufs = []
    start_point = ''
    if args.start_point is None:
        start_point = 'HEAD'
    else:
        start_point = args.start_point
    bufs = do_cmd('git blame {0} -l -- {1}'.format(start_point, fi.name)).splitlines()

    blames = []
    for buf in bufs:
        blames.append(buf.split(' ')[0])

    commits = []
    for line_descriptor in related_lines:
        (line_num, count) = line_descriptor.split(',')
        for i in range(int(line_num) - 1, int(line_num) - 1 + int(count)):
            commits.append(blames[i])
    return set(commits)

def get_related_commits(args, files):
    bufs = []

    for fi in files:
        if fi.content is None:
            bufs.append(get_last_commit(args, f = fi.name))
        else:
            bufs.extend(_get_related_commits(args, fi))
    bufs = set(bufs)

    bufs_2 = []
    for buf in bufs:
        #if do_cmd("git log -1 --pretty='%H %ct' {0}".format(buf)) == '': continue
        print buf
        print do_cmd("git log -1 --pretty='%H %ct' {0}".format(buf))
        (sha1, comp_time) = do_cmd("git log -1 --pretty='%H %ct' {0}".format(buf)).splitlines()[0].split(' ')
        bufs_2.append((sha1, comp_time))
    bufs_2.sort(key = lambda tup: tup[1], reverse = True)

    commits = []
    for buf in bufs_2:
        commits.append(buf[0])

    return commits

def get_proper_commits(commits):
    google = None
    qualcomm = None
    gigabyte = None
    other = None

    commit_info = []
    for c in commits:
        (sha1, email) = do_cmd("git log -1 --pretty='%H %ae' {0}".format(c)).splitlines()[0].split(' ')
        commit_info.append((sha1, email))

    for ci in commit_info:
        if 'google' in ci[1] or 'android' in ci[1]:
            if google is None:
                google = ci[0]
        elif 'codeaurora' in ci[1] or 'qualcomm' in ci[1]:
            if qualcomm is None:
                qualcomm = ci[0]
        elif 'gigabyte' in ci[1] or 'gbc' in ci[1]:
            if gigabyte is None:
                gigabyte = ci[0]
        else:
            if other is None:
                other = ci[0]

    return (google, qualcomm, gigabyte, other)

def print_result(args, commits, **kwargs):
    if args.all:
        print('All related commits:')
        for c in commits:
            print(c),
            print(do_cmd("git log -1 --pretty='%ci %an <%ae>' {0}".format(c)).splitlines()[0])
        print('')

    for key in kwargs:
        if key is 'google':
            print('Google:'),
        elif key is 'qualcomm':
            print('Qualcomm:'),
        elif key is 'gigabyte':
            print('Gigabyte:'),
        else:
            print('Other:'),
        if kwargs[key] is None:
            print(kwargs[key])
        else:
            print(kwargs[key]),
            print(do_cmd("git log -1 --pretty='%ci %an <%ae>' {0}".format(kwargs[key])).splitlines()[0])

def main():
    args = get_args()
    chcwd_to_git_root()
    patch = get_patch(args)
    files = get_related_files(patch)
    commits = get_related_commits(args, files)
    (google, qualcomm, gigabyte, other) = get_proper_commits(commits)

    print_result(args,
            commits, google = google,
            qualcomm = qualcomm,
            gigabyte = gigabyte,
            other = other)

if __name__ == '__main__':
    main()
